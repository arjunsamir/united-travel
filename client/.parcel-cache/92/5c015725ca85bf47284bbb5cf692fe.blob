"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _Scroll = _interopRequireDefault(require("./components/Scroll"));
var _Navbar = _interopRequireDefault(require("./components/Navbar"));
var _Typewriter2 = _interopRequireDefault(require("./components/Typewriter"));
var _DraggableSlider2 = _interopRequireDefault(require("./components/DraggableSlider"));
var _ContactForm2 = _interopRequireDefault(require("./components/ContactForm"));
var _AuthForm2 = _interopRequireDefault(require("./components/AuthForm"));
var _BookingApp2 = _interopRequireDefault(require("../BookingApp"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Import Components
// import BookingApp from './components/app/BookingApp';
const componentsRegistry = {
    Typewriter: (dta, ctn)=>new _Typewriter2.default(dta !== null && dta !== void 0 ? dta : '#typewrite', ctn)
    ,
    DraggableSlider: (dta, ctn)=>new _DraggableSlider2.default(dta, ctn)
    ,
    ContactForm: (dta, ctn)=>new _ContactForm2.default(dta !== null && dta !== void 0 ? dta : '#contact-form', ctn)
    ,
    AuthForm: (dta, ctn)=>new _AuthForm2.default(dta, ctn)
    ,
    BookingApp: (dta, ctn)=>new _BookingApp2.default(dta, ctn)
}; // Create Page Class
class Page {
    init() {
        // Add Namespace Class to body
        this.elements.body.addClass("".concat(this.state.namespace, "-page")); // Initialize Crucial Modules
        this.scroll = new _Scroll.default(this);
        this.navbar = new _Navbar.default(this); // Return Class Instance
        return this;
    }
    async destroy() {
        // Hide Page
        $(this.elements.container).css({
            display: 'none'
        }); // Remove Page Class From Body
        this.elements.body.removeClass(Array.from(this.elements.body.e().classList).filter((name)=>name.includes('page')
        ).join(' ')); // Add Fixed Class
        this.elements.body.addClass('fixed'); // Destroy Scroll Instance
        this.scroll.destroy(); // Return From Async Function
        return;
    }
    start() {
        this.scroll.init();
        this.navbar.init(); // Mount Remaining Components
        this.components.registrar.forEach((component)=>{
            this.components.mounted[component.name].init();
        });
    }
    addComponent() {
        for(var _len = arguments.length, components = new Array(_len), _key = 0; _key < _len; _key++)components[_key] = arguments[_key];
        components.forEach((component)=>{
            var _comp$data;
            const comp = typeof component == 'string' ? {
                name: component
            } : component;
            this.components.registrar.push({
                name: comp.name,
                data: comp.data
            });
            this.components.mounted[comp.name] = componentsRegistry[comp.name]((_comp$data = comp.data) !== null && _comp$data !== void 0 ? _comp$data : null, this.elements.container);
            if (this.components.mounted[comp.name].load) this.components.mounted[comp.name].load();
        });
    }
    constructor(props){
        var _props$smoothScroll, _props$container, _props$barba$url$clea;
        this.options = {
            smoothScroll: (_props$smoothScroll = props.smoothScroll) !== null && _props$smoothScroll !== void 0 ? _props$smoothScroll : true
        };
        this.elements = {
            container: (_props$container = props.container) !== null && _props$container !== void 0 ? _props$container : $('main').e(),
            body: $('body')
        };
        this.state = {
            namespace: this.elements.container.dataset.barbaNamespace,
            isMobile: null,
            menuIsOpen: false,
            url: (_props$barba$url$clea = props.barba.url.clean()) !== null && _props$barba$url$clea !== void 0 ? _props$barba$url$clea : window.location.href
        };
        this.components = {
            registrar: [],
            mounted: {
            }
        };
        this.barba = props.barba;
    }
}
exports.default = Page;
