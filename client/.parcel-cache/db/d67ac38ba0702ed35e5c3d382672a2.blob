var helpers = require("../../../../../../../../../../../usr/local/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _store = require("../../store");
var _Select = _interopRequireDefault(require("../../components/molecules/Select"));
var _BookingCard = _interopRequireDefault(require("../../components/organisms/BookingCard"));
var _utils = require("../../helpers/utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function _getRequireWildcardCache1() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
        else newObj[key] = obj[key];
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
// Import Defaults
// Import Context
// Import Molecules
// Import Organizms
// Utilities
const bc = _utils.bemify('booking-card'); // Dropdown Options
const options = [
    {
        title: 'Yes',
        text: 'I need to be picked up or dropped off at the airport.',
        value: true
    },
    {
        title: 'No',
        text: 'I need a ride to a hotel, theme park, beach, resturant, etc.',
        value: false
    }
]; // Airport Ride Step
const AirportRide = (_ref)=>{
    let { navigateTo  } = _ref;
    // Import State & Dispatch
    const { state , dispatch  } = _react.useContext(_store.AppContext); // Choose Default Selected Element
    const selected = options.filter((opt)=>opt.value === state.reservation.airportRide
    ); // Set Up State To Track Allowed Naviation Actions
    const allowed = selected.length ? [
        'next'
    ] : []; // Function To Update State
    const updateState = (data)=>{
        dispatch({
            type: "UPDATE_RESERVATION_AIRPORT-RIDE",
            payload: data.value
        });
    };
    return(/*#__PURE__*/ _react.default.createElement(_BookingCard.default, {
        title: /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, "Is this an ", /*#__PURE__*/ _react.default.createElement("span", null, "airport"), " ride?"),
        allowed: allowed,
        next: ()=>{
            navigateTo('flight-location');
        }
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: bc('fieldset')
    }, /*#__PURE__*/ _react.default.createElement(_Select.default, {
        type: "radio",
        options: options,
        name: "airport-ride",
        selected: selected,
        onChange: updateState
    }))));
};
_c = AirportRide;
var _default = AirportRide;
exports.default = _default;
var _c;
$RefreshReg$(_c, "AirportRide");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}