"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("../../libs/utils");
var _AssistiveText = _interopRequireDefault(require("../AssistiveText"));
var _context = require("./context");
var _getMaxHeight = _interopRequireDefault(require("./getMaxHeight"));
var _description = _interopRequireDefault(require("./description"));
var _rightArrow = _interopRequireDefault(require("./rightArrow"));
var _container = _interopRequireDefault(require("./styled/container"));
var _button = _interopRequireDefault(require("./styled/button"));
var _actionContainer = _interopRequireDefault(require("./styled/actionContainer"));
var _actionLabel = _interopRequireDefault(require("./styled/actionLabel"));
var _overflow = _interopRequireDefault(require("./styled/overflow"));
var _ul = _interopRequireDefault(require("./styled/ul"));
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf2["default"](Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf2["default"](this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn2["default"](this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * Represents an overflow of items from a preceding VerticalNavigationSection,
 * with the ability to toggle visibility.
 * @category Layout
 */ var VerticalSectionOverflow1 = /*#__PURE__*/ function(_Component) {
    _inherits2["default"](VerticalSectionOverflow2, _Component);
    var _super = _createSuper(VerticalSectionOverflow2);
    function VerticalSectionOverflow2(props) {
        var _this;
        _classCallCheck2["default"](this, VerticalSectionOverflow2);
        _this = _super.call(this, props);
        _this.searchResultsId = _utils.uniqueId('search-results');
        _this.state = {
            isExpanded: props.expanded
        };
        _this.toggleOverflow = _this.toggleOverflow.bind(_assertThisInitialized2["default"](_this));
        return _this;
    }
    _createClass2["default"](VerticalSectionOverflow2, [
        {
            key: "toggleOverflow",
            value: function toggleOverflow(event) {
                var isExpanded = this.state.isExpanded;
                var onToggleSection = this.props.onToggleSection;
                if (typeof onToggleSection === 'function') return onToggleSection(event);
                return this.setState({
                    isExpanded: !isExpanded
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, label = _this$props.label, description = _this$props.description, style = _this$props.style, assistiveText = _this$props.assistiveText, children = _this$props.children, className = _this$props.className;
                var isExpanded = this.state.isExpanded;
                var sectionMaxHeight = {
                    maxHeight: _getMaxHeight["default"](children, isExpanded)
                };
                return(/*#__PURE__*/ _react["default"].createElement(_container["default"], {
                    "data-id": "vertical-overflow-container",
                    className: className,
                    style: style,
                    isExpanded: isExpanded
                }, /*#__PURE__*/ _react["default"].createElement(_button["default"], {
                    "data-id": "vertical-overflow-button",
                    "aria-controls": this.searchResultsId,
                    "aria-expanded": isExpanded,
                    onClick: this.toggleOverflow,
                    isExpanded: isExpanded,
                    description: description
                }, /*#__PURE__*/ _react["default"].createElement(_actionContainer["default"], {
                    as: "div"
                }, /*#__PURE__*/ _react["default"].createElement(_actionLabel["default"], null, label), /*#__PURE__*/ _react["default"].createElement(_description["default"], {
                    isExpanded: isExpanded,
                    description: description
                }), /*#__PURE__*/ _react["default"].createElement(_AssistiveText["default"], {
                    text: assistiveText
                })), /*#__PURE__*/ _react["default"].createElement(_rightArrow["default"], {
                    isExpanded: isExpanded
                })), /*#__PURE__*/ _react["default"].createElement(_overflow["default"], {
                    "data-id": "vertical-overflow",
                    id: this.searchResultsId,
                    style: sectionMaxHeight,
                    isExpanded: isExpanded
                }, /*#__PURE__*/ _react["default"].createElement(_context.Provider, {
                    value: isExpanded
                }, /*#__PURE__*/ _react["default"].createElement(_ul["default"], null, children)))));
            }
        }
    ], [
        {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(nextProps, state) {
                var expanded = nextProps.expanded, onToggleSection = nextProps.onToggleSection;
                if (expanded !== state.isExpanded && typeof onToggleSection === 'function') return {
                    isExpanded: expanded
                };
                return null;
            }
        }
    ]);
    return VerticalSectionOverflow2;
}(_react.Component);
exports["default"] = VerticalSectionOverflow1;
VerticalSectionOverflow1.propTypes = {
    /** The label to show when the section is collapsed. */ label: _propTypes["default"].oneOfType([
        _propTypes["default"].string,
        _propTypes["default"].node
    ]),
    /** The description to show when the section is collapsed. */ description: _propTypes["default"].oneOfType([
        _propTypes["default"].string,
        _propTypes["default"].node
    ]),
    /** The state of the overflow. */ expanded: _propTypes["default"].bool,
    /** A description for assistive sreen readers. */ assistiveText: _propTypes["default"].string,
    /** A CSS class for the outer element, in addition to the component's base classes. */ className: _propTypes["default"].string,
    /** An object with custom style applied for the outer element. */ style: _propTypes["default"].object,
    /** Action fired when a component is clicked. */ onToggleSection: _propTypes["default"].func,
    /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */ children: _propTypes["default"].node
};
VerticalSectionOverflow1.defaultProps = {
    label: '',
    description: '',
    expanded: false,
    className: undefined,
    style: undefined,
    assistiveText: undefined,
    children: null,
    onToggleSection: undefined
};
