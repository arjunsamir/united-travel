"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _styledComponents = require("styled-components");
var _body = _interopRequireDefault(require("./body"));
var _head = _interopRequireDefault(require("./head"));
var _sort = require("./helpers/sort");
var _columns = require("./helpers/columns");
var _resizer = require("./helpers/resizer");
var _rows = require("./helpers/rows");
var _selector = require("./helpers/selector");
var _data = require("./helpers/data");
var _ResizeSensor = _interopRequireDefault(require("../../libs/ResizeSensor"));
var _debounce = _interopRequireDefault(require("../../libs/debounce"));
var _utils = require("../../libs/utils");
var _empty = _interopRequireDefault(require("./body/icons/empty"));
var _container = _interopRequireDefault(require("./styled/container"));
var _scrollableX = _interopRequireDefault(require("./styled/scrollableX"));
var _scrollableY = _interopRequireDefault(require("./styled/scrollableY"));
var _table = _interopRequireDefault(require("./styled/table"));
var _tableBody = _interopRequireDefault(require("./styled/tableBody"));
var _thead = _interopRequireDefault(require("./styled/thead"));
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf2["default"](Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf2["default"](this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn2["default"](this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * A table lists a collection of data that makes sense when displays them in rows and columns.
 * The data contained in a table is easier to read due to the format, so it can be useful to sort,
 * search, and filter your data.
 * @category DataView
 */ var Table1 = /*#__PURE__*/ function(_Component) {
    _inherits2["default"](Table2, _Component);
    var _super = _createSuper(Table2);
    function Table2(props) {
        var _this;
        _classCallCheck2["default"](this, Table2);
        _this = _super.call(this, props);
        var children = props.children, showCheckboxColumn = props.showCheckboxColumn, keyField = props.keyField, data = props.data, showRowNumberColumn = props.showRowNumberColumn, rowNumberOffset = props.rowNumberOffset, maxRowSelection = props.maxRowSelection, minColumnWidth = props.minColumnWidth, maxColumnWidth = props.maxColumnWidth, selectedRows = props.selectedRows, variant = props.variant;
        _this.state = {
            columns: _columns.getColumns({
                children: children,
                showCheckboxColumn: showCheckboxColumn,
                showRowNumberColumn: showRowNumberColumn,
                rowNumberOffset: rowNumberOffset,
                minColumnWidth: minColumnWidth,
                maxColumnWidth: maxColumnWidth,
                variant: variant
            }),
            tableWidth: undefined,
            rows: _rows.getRows({
                keyField: keyField,
                rows: _data.normalizeData(data),
                maxRowSelection: maxRowSelection && Number(maxRowSelection),
                selectedRowsKeys: {
                }
            }),
            bulkSelection: 'none'
        };
        var rows = _this.state.rows;
        _this.indexes = _rows.getIndexes(rows);
        _this.selectedRowsKeys = _selector.getSelectedRowKeysFromSelectedRows(selectedRows, _this.indexes);
        _this.tableId = _utils.uniqueId('table');
        _this.tableContainerRef = /*#__PURE__*/ _react["default"].createRef();
        _this.resizeTarget = /*#__PURE__*/ _react["default"].createRef();
        _this.handleSort = _this.handleSort.bind(_assertThisInitialized2["default"](_this));
        _this.handleResize = _this.handleResize.bind(_assertThisInitialized2["default"](_this));
        _this.updateColumnsAndTableWidth = _this.updateColumnsAndTableWidth.bind(_assertThisInitialized2["default"](_this));
        _this.handleSelectRow = _this.handleSelectRow.bind(_assertThisInitialized2["default"](_this));
        _this.handleDeselectRow = _this.handleDeselectRow.bind(_assertThisInitialized2["default"](_this));
        _this.handleSelectAllRows = _this.handleSelectAllRows.bind(_assertThisInitialized2["default"](_this));
        _this.handleDeselectAllRows = _this.handleDeselectAllRows.bind(_assertThisInitialized2["default"](_this));
        _this.scrollableY = /*#__PURE__*/ _react["default"].createRef();
        return _this;
    }
    _createClass2["default"](Table2, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.widthObserver = new _ResizeSensor["default"](this.resizeTarget.current, _debounce["default"](this.updateColumnsAndTableWidth, 200));
                this.updateRows();
                this.updateColumnsAndTableWidth();
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var prevChildren = prevProps.children, prevShowCheckboxColumn = prevProps.showCheckboxColumn, prevMaxRowSelection = prevProps.maxRowSelection, prevSelectedRows = prevProps.selectedRows, prevData = prevProps.data, prevMinColumnWidth = prevProps.minColumnWidth, prevMaxColumnWidth = prevProps.maxColumnWidth;
                var _this$props = this.props, children = _this$props.children, showCheckboxColumn = _this$props.showCheckboxColumn, showRowNumberColumn = _this$props.showRowNumberColumn, rowNumberOffset = _this$props.rowNumberOffset, maxRowSelection = _this$props.maxRowSelection, selectedRows = _this$props.selectedRows, data = _this$props.data, keyField = _this$props.keyField, minColumnWidth = _this$props.minColumnWidth, maxColumnWidth = _this$props.maxColumnWidth, onRowSelection = _this$props.onRowSelection, variant = _this$props.variant;
                var prevColumns = _columns.getColumns({
                    children: prevChildren,
                    showCheckboxColumn: prevShowCheckboxColumn,
                    showRowNumberColumn: showRowNumberColumn,
                    rowNumberOffset: rowNumberOffset,
                    minColumnWidth: prevMinColumnWidth,
                    maxColumnWidth: prevMaxColumnWidth,
                    variant: variant
                });
                var currentColumns = _columns.getColumns({
                    children: children,
                    showCheckboxColumn: showCheckboxColumn,
                    showRowNumberColumn: showRowNumberColumn,
                    rowNumberOffset: rowNumberOffset,
                    minColumnWidth: minColumnWidth,
                    maxColumnWidth: maxColumnWidth,
                    variant: variant
                });
                var isNotSameMaxRowSelection = prevMaxRowSelection !== maxRowSelection;
                var isNotSameData = data !== prevData;
                if (isNotSameMaxRowSelection || isNotSameData) this.updateRows();
                if (_columns.isNotSameColumns(prevColumns, currentColumns)) this.updateColumnsAndTableWidth(currentColumns);
                var isNotSameSelectedRows = prevSelectedRows !== selectedRows;
                if (isNotSameSelectedRows) {
                    var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;
                    if (selectedRowsKeysLength !== selectedRows.length) {
                        this.selectedRowsKeys = _selector.getSelectedRowKeysFromSelectedRows(selectedRows, this.indexes);
                        var updatedRows = _rows.getRows({
                            keyField: keyField,
                            rows: _data.normalizeData(data),
                            maxRowSelection: maxRowSelection,
                            selectedRowsKeys: this.selectedRowsKeys
                        });
                        onRowSelection(this.getSelectedRows(updatedRows));
                        this.updateRows();
                    }
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.widthObserver.detach();
            }
        },
        {
            key: "getTableWidthFromDom",
            value: function getTableWidthFromDom() {
                var containerElement = this.tableContainerRef.current;
                if (containerElement) return containerElement.offsetWidth;
                return 0;
            }
        },
        {
            key: "getSelectedRows",
            value: function getSelectedRows(rows) {
                var data = this.props.data;
                return _data.normalizeData(data).filter(function(item, index) {
                    return rows[index].isSelected;
                });
            }
        },
        {
            key: "getMaxRowSelection",
            value: function getMaxRowSelection() {
                var _this$props2 = this.props, maxRowSelection = _this$props2.maxRowSelection, data = _this$props2.data;
                var rowsLength = _data.normalizeData(data).length;
                var maxRowSelectionNumber = Number(maxRowSelection);
                if (!_selector.isValidMaxRowSelection(maxRowSelection, rowsLength)) return rowsLength;
                return maxRowSelectionNumber;
            }
        },
        {
            key: "scrollTop",
            value: function scrollTop() {
                this.scrollableY.current.scrollTop = 0;
            }
        },
        {
            key: "updateRows",
            value: function updateRows() {
                var _this$props3 = this.props, keyField = _this$props3.keyField, selectedRows = _this$props3.selectedRows, onRowSelection = _this$props3.onRowSelection, data = _this$props3.data;
                var maxRowSelection = this.getMaxRowSelection();
                var newRows = _rows.getRows({
                    keyField: keyField,
                    rows: _data.normalizeData(data),
                    maxRowSelection: maxRowSelection,
                    selectedRowsKeys: this.selectedRowsKeys
                });
                this.indexes = _rows.getIndexes(newRows);
                var selectedRowsKeysLength = Object.keys(this.selectedRowsKeys).length;
                var currentSelectedRows = this.getSelectedRows(newRows);
                var isNotSameSelectedRowsWithNewData = selectedRowsKeysLength !== currentSelectedRows.length;
                if (isNotSameSelectedRowsWithNewData) {
                    onRowSelection(currentSelectedRows);
                    this.selectedRowsKeys = _selector.getSelectedRowKeys(currentSelectedRows, keyField);
                }
                this.setState({
                    rows: _selector.getRowsWithInitalSelectedRows({
                        rows: newRows,
                        selectedRows: selectedRows,
                        maxRowSelection: maxRowSelection,
                        indexes: this.indexes,
                        selectedRowsKeys: this.selectedRowsKeys
                    }),
                    bulkSelection: _selector.getBulkSelectionState({
                        maxRowSelection: maxRowSelection,
                        selectedRowsKeys: this.selectedRowsKeys
                    })
                });
            }
        },
        {
            key: "updateColumnsAndTableWidth",
            value: function updateColumnsAndTableWidth(newColumns) {
                var columns = this.state.columns;
                var _this$props4 = this.props, minColumnWidth = _this$props4.minColumnWidth, maxColumnWidth = _this$props4.maxColumnWidth;
                var domTableWidth = this.getTableWidthFromDom();
                var minColWidth = Number(minColumnWidth) || 50;
                var maxColWidth = Number(maxColumnWidth) || Infinity;
                var updatedColumns = _resizer.getUpdatedColumns({
                    columns: newColumns || columns,
                    domTableWidth: domTableWidth,
                    minColumnWidth: minColWidth,
                    maxColumnWidth: maxColWidth
                });
                this.setState({
                    columns: updatedColumns
                });
                if (this.hasFlexibleColumns()) this.setState({
                    tableWidth: _resizer.getTableWidth(updatedColumns)
                });
            }
        },
        {
            key: "handleSelectAllRows",
            value: function handleSelectAllRows() {
                var onRowSelection = this.props.onRowSelection;
                var rows = this.state.rows;
                var maxRowSelection = this.getMaxRowSelection();
                this.selectedRowsKeys = {
                };
                var updatedRows = _selector.getUpdatedRowsWhenSelectAll({
                    rows: rows,
                    maxRowSelection: maxRowSelection,
                    selectedRowsKeys: this.selectedRowsKeys
                });
                var bulkSelection = _selector.getBulkSelectionState({
                    maxRowSelection: maxRowSelection,
                    selectedRowsKeys: this.selectedRowsKeys
                });
                this.setState({
                    rows: updatedRows,
                    bulkSelection: bulkSelection
                });
                onRowSelection(this.getSelectedRows(updatedRows));
            }
        },
        {
            key: "handleDeselectAllRows",
            value: function handleDeselectAllRows() {
                var onRowSelection = this.props.onRowSelection;
                var rows = this.state.rows;
                this.selectedRowsKeys = {
                };
                var updatedRows = _selector.getUpdatedRowsWhenDeselectAll(rows);
                var bulkSelection = _selector.getBulkSelectionState({
                    maxRowSelection: this.getMaxRowSelection(),
                    selectedRowsKeys: this.selectedRowsKeys
                });
                this.setState({
                    rows: updatedRows,
                    bulkSelection: bulkSelection
                });
                onRowSelection(this.getSelectedRows(updatedRows));
            }
        },
        {
            key: "handleSelectRow",
            value: function handleSelectRow(event, isMultiple, rowKeyValue) {
                var onRowSelection = this.props.onRowSelection;
                var indexes = this.indexes;
                var rows = this.state.rows;
                var maxRowSelection = this.getMaxRowSelection();
                if (maxRowSelection > 1) {
                    var updatedRows = _selector.getUpdatedRowsWhenSelect({
                        maxRowSelection: maxRowSelection,
                        rows: rows,
                        indexes: indexes,
                        isMultiple: isMultiple,
                        rowKeyValue: rowKeyValue,
                        lastSelectedRowKey: this.lastSelectedRowKey,
                        selectedRowsKeys: this.selectedRowsKeys
                    });
                    var bulkSelection = _selector.getBulkSelectionState({
                        maxRowSelection: maxRowSelection,
                        selectedRowsKeys: this.selectedRowsKeys
                    });
                    this.setState({
                        rows: updatedRows,
                        bulkSelection: bulkSelection
                    });
                    onRowSelection(this.getSelectedRows(updatedRows));
                } else {
                    this.selectedRowsKeys = {
                    };
                    this.selectedRowsKeys[rowKeyValue] = true;
                    var _updatedRows = _selector.getUpdatedRowsWhenSelect({
                        maxRowSelection: maxRowSelection,
                        rows: rows,
                        rowKeyValue: rowKeyValue,
                        selectedRowsKeys: this.selectedRowsKeys
                    });
                    this.setState({
                        rows: _updatedRows
                    });
                    onRowSelection(this.getSelectedRows(_updatedRows));
                }
                this.lastSelectedRowKey = rowKeyValue;
            }
        },
        {
            key: "handleDeselectRow",
            value: function handleDeselectRow(event, isMultiple, rowKeyValue) {
                var onRowSelection = this.props.onRowSelection;
                var indexes = this.indexes;
                var rows = this.state.rows;
                var maxRowSelection = this.getMaxRowSelection();
                var updatedRows = _selector.getUpdatedRowsWhenDeselect({
                    maxRowSelection: maxRowSelection,
                    rows: rows,
                    indexes: indexes,
                    isMultiple: isMultiple,
                    rowKeyValue: rowKeyValue,
                    lastSelectedRowKey: this.lastSelectedRowKey,
                    selectedRowsKeys: this.selectedRowsKeys
                });
                var bulkSelection = _selector.getBulkSelectionState({
                    maxRowSelection: maxRowSelection,
                    selectedRowsKeys: this.selectedRowsKeys
                });
                this.setState({
                    rows: updatedRows,
                    bulkSelection: bulkSelection
                });
                this.lastSelectedRowKey = rowKeyValue;
                onRowSelection(this.getSelectedRows(updatedRows));
            }
        },
        {
            key: "hasFlexibleColumns",
            value: function hasFlexibleColumns() {
                var columns = this.state.columns;
                return columns.some(function(column) {
                    return column.isResized !== true;
                });
            }
        },
        {
            key: "handleResize",
            value: function handleResize(widthDelta, colIndex) {
                var _this$state = this.state, columns = _this$state.columns, tableWidth = _this$state.tableWidth;
                if (widthDelta !== 0) this.setState({
                    columns: _resizer.getResizedColumns({
                        columns: columns,
                        colIndex: colIndex,
                        widthDelta: widthDelta
                    }),
                    tableWidth: tableWidth + widthDelta
                });
            }
        },
        {
            key: "handleSort",
            value: function handleSort(event, field, sortDirection) {
                var _this$props5 = this.props, onSort = _this$props5.onSort, sortedBy = _this$props5.sortedBy;
                var nextSortDirection = _sort.getNextSortDirection(field, sortedBy, sortDirection);
                onSort(event, field, nextSortDirection);
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props6 = this.props, id = _this$props6.id, data = _this$props6.data, sortedBy = _this$props6.sortedBy, sortDirection = _this$props6.sortDirection, defaultSortDirection = _this$props6.defaultSortDirection, resizeColumnDisabled = _this$props6.resizeColumnDisabled, rowNumberOffset = _this$props6.rowNumberOffset, minColumnWidth = _this$props6.minColumnWidth, maxColumnWidth = _this$props6.maxColumnWidth, style = _this$props6.style, className = _this$props6.className, isLoading = _this$props6.isLoading, emptyIcon = _this$props6.emptyIcon, emptyTitle = _this$props6.emptyTitle, emptyDescription = _this$props6.emptyDescription, keyField = _this$props6.keyField, hideTableHeader = _this$props6.hideTableHeader, variant = _this$props6.variant;
                var _this$state2 = this.state, columns = _this$state2.columns, tableWidth = _this$state2.tableWidth, rows = _this$state2.rows, bulkSelection = _this$state2.bulkSelection;
                var tableStyles = {
                    width: tableWidth
                };
                var maxRowSelection = this.getMaxRowSelection();
                var minColWidth = Number(minColumnWidth) || 50;
                var maxColWidth = Number(maxColumnWidth) || 5000;
                var isEmpty = data.length === 0;
                var theme = {
                    variant: variant,
                    hideTableHeader: hideTableHeader,
                    isEmpty: isEmpty
                };
                if (keyField && typeof keyField === 'string') return(/*#__PURE__*/ _react["default"].createElement(_container["default"], {
                    id: id,
                    className: className,
                    style: style
                }, /*#__PURE__*/ _react["default"].createElement("div", {
                    ref: this.resizeTarget
                }), /*#__PURE__*/ _react["default"].createElement(_styledComponents.ThemeProvider, {
                    theme: theme
                }, /*#__PURE__*/ _react["default"].createElement(_container["default"], null, /*#__PURE__*/ _react["default"].createElement(_scrollableX["default"], {
                    ref: this.tableContainerRef
                }, /*#__PURE__*/ _react["default"].createElement(_scrollableY["default"], {
                    isEmpty: isEmpty,
                    isLoading: isLoading,
                    ref: this.scrollableY,
                    style: tableStyles
                }, /*#__PURE__*/ _react["default"].createElement(_table["default"], {
                    style: tableStyles
                }, /*#__PURE__*/ _react["default"].createElement(_thead["default"], null, /*#__PURE__*/ _react["default"].createElement("tr", null, /*#__PURE__*/ _react["default"].createElement(_head["default"], {
                    columns: columns,
                    sortedBy: sortedBy,
                    sortDirection: sortDirection,
                    defaultSortDirection: defaultSortDirection,
                    resizeColumnDisabled: resizeColumnDisabled,
                    minColumnWidth: minColWidth,
                    maxColumnWidth: maxColWidth,
                    onSort: this.handleSort,
                    onResize: this.handleResize,
                    onSelectAllRows: this.handleSelectAllRows,
                    onDeselectAllRows: this.handleDeselectAllRows,
                    tableId: this.tableId,
                    maxRowSelection: maxRowSelection,
                    bulkSelection: bulkSelection
                }))), /*#__PURE__*/ _react["default"].createElement(_tableBody["default"], {
                    rowNumberOffset: rowNumberOffset
                }, /*#__PURE__*/ _react["default"].createElement(_body["default"], {
                    data: _data.normalizeData(data),
                    columns: columns,
                    rows: rows,
                    tableId: this.tableId,
                    isLoading: isLoading,
                    emptyIcon: emptyIcon,
                    emptyTitle: emptyTitle,
                    emptyDescription: emptyDescription,
                    onSelectRow: this.handleSelectRow,
                    onDeselectRow: this.handleDeselectRow
                })))))))));
                console.error('The "keyField" is a required prop of the Table component.');
                return null;
            }
        }
    ]);
    return Table2;
}(_react.Component);
exports["default"] = Table1;
Table1.propTypes = {
    /** An array containing the objects(rows) to be displayed. */ data: _propTypes["default"].arrayOf(Object),
    /** The column fieldName that controls the sorting order.
   * Sorts the data using the onsort event handler. */ sortedBy: _propTypes["default"].string,
    /**
   * Specifies the sorting direction. Valid options are 'asc' or 'desc'.
   */ sortDirection: _propTypes["default"].oneOf([
        'asc',
        'desc'
    ]),
    /** Specifies the default sorting direction on an unsorted column.
   * Valid options include 'asc' and 'desc'.
   * The default is 'asc' for sorting in ascending order. */ defaultSortDirection: _propTypes["default"].oneOf([
        'asc',
        'desc'
    ]),
    /** Action triggered when a column is sorted.
   * Receives the event object, field and sortDirection. */ onSort: _propTypes["default"].func,
    /** Specifies whether column resizing is disabled. The default is false. */ resizeColumnDisabled: _propTypes["default"].bool,
    /** The minimum width for all columns. The default value is 50px. */ minColumnWidth: _propTypes["default"].oneOfType([
        _propTypes["default"].number,
        _propTypes["default"].string
    ]),
    /** The maximum width for all columns. The default value is Infinity. */ maxColumnWidth: _propTypes["default"].oneOfType([
        _propTypes["default"].number,
        _propTypes["default"].string
    ]),
    /** Shows or hide the checkbox column for row selection. To show set
   * showCheckboxColumn to true. The default value is false. */ showCheckboxColumn: _propTypes["default"].bool,
    /** Shows or hides the row number column. Set to true to show the row number column. The default is false. */ showRowNumberColumn: _propTypes["default"].bool,
    /** Determines where to start counting the row number. The default is 0. */ rowNumberOffset: _propTypes["default"].number,
    /** The action triggered when a row is selected. Receives the selectedRows array. */ onRowSelection: _propTypes["default"].func,
    /** The maximum number of rows that can be selected. When the value is
   * 1 the selection is made by radio buttons, otherwise with checkboxes. */ maxRowSelection: _propTypes["default"].oneOfType([
        _propTypes["default"].number,
        _propTypes["default"].string
    ]),
    /** An array with a list of keyField values of the selected rows. */ selectedRows: _propTypes["default"].array,
    /** It is required to associate each row with a unique ID. Must be one of the data key.
   * If it is not passed the component will not render.
   */ keyField: _propTypes["default"].string.isRequired,
    /** Specifies whether data is being loaded. The default is false. */ isLoading: _propTypes["default"].bool,
    /** The icon that appears in the message of the Table when is empty.
   * If not passed a fallback icon will be shown. */ emptyIcon: _propTypes["default"].node,
    /** The title that appears in the message of the Table when is empty.
   *  If not passed a fallback title will be shown.
   */ emptyTitle: _propTypes["default"].oneOfType([
        _propTypes["default"].string,
        _propTypes["default"].node
    ]),
    /** The description that appears in the message of the Table when is empty.
   *  If not passed a fallback description will be shown.
   */ emptyDescription: _propTypes["default"].oneOfType([
        _propTypes["default"].string,
        _propTypes["default"].node
    ]),
    /** The variant changes the appearance of the button. Accepted variants include default and listview. */ variant: _propTypes["default"].oneOf([
        'default',
        'listview'
    ]),
    /** The id of the outer element. */ id: _propTypes["default"].string,
    /** Shows or hides the header column. The default is false */ hideTableHeader: _propTypes["default"].bool,
    /** A CSS class for the outer element, in addition to the component's base classes. */ className: _propTypes["default"].string,
    /** An object with custom style applied for the outer element. */ style: _propTypes["default"].object,
    /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */ children: _propTypes["default"].node
};
Table1.defaultProps = {
    data: [],
    sortedBy: undefined,
    sortDirection: undefined,
    defaultSortDirection: 'asc',
    onSort: function onSort() {
    },
    resizeColumnDisabled: false,
    minColumnWidth: 50,
    maxColumnWidth: Infinity,
    showCheckboxColumn: false,
    showRowNumberColumn: false,
    rowNumberOffset: 0,
    onRowSelection: function onRowSelection() {
    },
    maxRowSelection: undefined,
    selectedRows: [],
    isLoading: false,
    emptyIcon: /*#__PURE__*/ _react["default"].createElement(_empty["default"], null),
    emptyTitle: 'It’s empty here',
    emptyDescription: 'Our robots did not find any match...',
    variant: 'default',
    id: undefined,
    hideTableHeader: false,
    className: undefined,
    style: undefined,
    children: undefined
};
