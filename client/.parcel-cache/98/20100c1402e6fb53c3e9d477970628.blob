'use strict';
import   "07813035d0002c0878e0844f2087ef0f:./../utils";
import   "07813035d0002c0878e0844f2087ef0f:./../core/settle";
import   "07813035d0002c0878e0844f2087ef0f:./../helpers/cookies";
import   "07813035d0002c0878e0844f2087ef0f:./../helpers/buildURL";
import   "07813035d0002c0878e0844f2087ef0f:../core/buildFullPath";
import   "07813035d0002c0878e0844f2087ef0f:./../helpers/parseHeaders";
import   "07813035d0002c0878e0844f2087ef0f:./../helpers/isURLSameOrigin";
import   "07813035d0002c0878e0844f2087ef0f:../core/createError";
$07813035d0002c0878e0844f2087ef0f$exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if ($07813035d0002c0878e0844f2087ef0f$import$61f3fc819ec50e70$c29651da47a81950(requestData)) delete requestHeaders['Content-Type']; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || '';
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
            requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }
        var fullPath = $07813035d0002c0878e0844f2087ef0f$import$87a00fca23182000(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), $07813035d0002c0878e0844f2087ef0f$import$5e06f97f79a64c42(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        // Listen for ready state
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) return;
            // Prepare the response
            var responseHeaders = 'getAllResponseHeaders' in request ? $07813035d0002c0878e0844f2087ef0f$import$7fec650f4514ae7f(request.getAllResponseHeaders()) : null;
            var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            $07813035d0002c0878e0844f2087ef0f$import$9469c8c63fdedc1c(resolve, reject, response);
            // Clean up request
            request = null;
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject($07813035d0002c0878e0844f2087ef0f$import$178bdc91faca9e36('Request aborted', config, 'ECONNABORTED', request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject($07813035d0002c0878e0844f2087ef0f$import$178bdc91faca9e36('Network Error', config, null, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject($07813035d0002c0878e0844f2087ef0f$import$178bdc91faca9e36(timeoutErrorMessage, config, 'ECONNABORTED', request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if ($07813035d0002c0878e0844f2087ef0f$import$61f3fc819ec50e70$ebc29cbba2eeb9d1()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || $07813035d0002c0878e0844f2087ef0f$import$7721b5e0a78e99f7(fullPath)) && config.xsrfCookieName ? $07813035d0002c0878e0844f2087ef0f$import$86fbf7623eeb77b0$2c262a1484748b93(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ('setRequestHeader' in request) $07813035d0002c0878e0844f2087ef0f$import$61f3fc819ec50e70$40f3d9558cf6e846(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!$07813035d0002c0878e0844f2087ef0f$import$61f3fc819ec50e70$3747995d719cde22(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (config.responseType) try {
            request.responseType = config.responseType;
        } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== 'json') throw e;
        }
        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') request.addEventListener('progress', config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) request.upload.addEventListener('progress', config.onUploadProgress);
        if (config.cancelToken) // Handle cancellation
        config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) return;
            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
        });
        if (!requestData) requestData = null;
        // Send the request
        request.send(requestData);
    });
};
