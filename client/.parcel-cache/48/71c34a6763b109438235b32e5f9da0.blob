"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _context = require("./context");
var _constants = require("../../libs/constants");
var _utils = require("./utils");
var _ul = _interopRequireDefault(require("./styled/ul"));
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf2["default"](Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf2["default"](this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn2["default"](this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
var RIGHT_SIDE = 1;
var LEFT_SIDE = -1;
/**
 * An Accordion is a collection of vertically stacked sections with multiple content areas.
 * Allows a user to toggle the display of a section of content.
 * @category Layout
 */ var Accordion1 = /*#__PURE__*/ function(_Component) {
    _inherits2["default"](Accordion2, _Component);
    var _super = _createSuper(Accordion2);
    function Accordion2(props) {
        var _this$keyHandlerMap;
        var _this;
        _classCallCheck2["default"](this, Accordion2);
        _this = _super.call(this, props);
        _this.containerRef = /*#__PURE__*/ _react["default"].createRef();
        _this.handleToggleSection = _this.handleToggleSection.bind(_assertThisInitialized2["default"](_this));
        _this.handleFocusSection = _this.handleFocusSection.bind(_assertThisInitialized2["default"](_this));
        _this.registerAccordionSection = _this.registerAccordionSection.bind(_assertThisInitialized2["default"](_this));
        _this.unregisterAccordionSection = _this.unregisterAccordionSection.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyPressed = _this.handleKeyPressed.bind(_assertThisInitialized2["default"](_this));
        _this.keyHandlerMap = (_this$keyHandlerMap = {
        }, _defineProperty2["default"](_this$keyHandlerMap, _constants.RIGHT_KEY, function() {
            return _this.selectAccordionSection(RIGHT_SIDE);
        }), _defineProperty2["default"](_this$keyHandlerMap, _constants.LEFT_KEY, function() {
            return _this.selectAccordionSection(LEFT_SIDE);
        }), _defineProperty2["default"](_this$keyHandlerMap, _constants.DOWN_KEY, function() {
            return _this.selectAccordionSection(RIGHT_SIDE);
        }), _defineProperty2["default"](_this$keyHandlerMap, _constants.UP_KEY, function() {
            return _this.selectAccordionSection(LEFT_SIDE);
        }), _this$keyHandlerMap);
        _this.state = {
            activeNames: props.activeSectionNames,
            multiple: props.multiple,
            privateOnToggleSection: _this.handleToggleSection,
            privateOnFocusSection: _this.handleFocusSection,
            privateRegisterAccordionSection: _this.registerAccordionSection,
            privateUnregisterAccordionSection: _this.unregisterAccordionSection,
            privateOnKeyPressed: _this.handleKeyPressed,
            childrenRegistered: []
        };
        return _this;
    }
    _createClass2["default"](Accordion2, [
        {
            key: "setAsSelectAccordionSection",
            value: function setAsSelectAccordionSection(accordionSectionIndex) {
                var childrenRegistered = this.state.childrenRegistered;
                childrenRegistered[accordionSectionIndex].focusButtonIcon();
            }
        },
        {
            key: "handleToggleSection",
            value: function handleToggleSection(event, name) {
                var onToggleSection = this.props.onToggleSection;
                if (typeof onToggleSection === 'function') return onToggleSection(event, name);
                return this.setState({
                    activeNames: name
                });
            }
        },
        {
            key: "handleFocusSection",
            value: function handleFocusSection(currentSection) {
                return this.setState({
                    currentSection: currentSection
                });
            }
        },
        {
            key: "handleKeyPressed",
            value: function handleKeyPressed(event) {
                if (this.keyHandlerMap[event.keyCode]) {
                    event.preventDefault();
                    return this.keyHandlerMap[event.keyCode]();
                }
                return null;
            }
        },
        {
            key: "selectAccordionSection",
            value: function selectAccordionSection(side) {
                var _this$state = this.state, childrenRegistered = _this$state.childrenRegistered, currentSection = _this$state.currentSection;
                var accordionSectionIndex = childrenRegistered.findIndex(function(section) {
                    return section.name === currentSection;
                });
                if (accordionSectionIndex === childrenRegistered.length - 1 && side === RIGHT_SIDE) this.setAsSelectAccordionSection(0);
                else if (accordionSectionIndex === 0 && side === LEFT_SIDE) this.setAsSelectAccordionSection(childrenRegistered.length - 1);
                else this.setAsSelectAccordionSection(accordionSectionIndex + side);
            }
        },
        {
            key: "registerAccordionSection",
            value: function registerAccordionSection(section) {
                var childrenRegistered = this.state.childrenRegistered;
                var _getChildAccordionSec = _utils.getChildAccordionSectionNodes(this.containerRef.current), _getChildAccordionSec2 = _toArray2["default"](_getChildAccordionSec), nodes = _getChildAccordionSec2.slice(0);
                var newChildrenRefs = _utils.insertChildOrderly(childrenRegistered, section, nodes);
                this.setState({
                    childrenRegistered: newChildrenRefs
                });
            }
        },
        {
            key: "unregisterAccordionSection",
            value: function unregisterAccordionSection(sectionName) {
                var childrenRegistered = this.state.childrenRegistered;
                var newAccordionSectionChildren = childrenRegistered.filter(function(section) {
                    return section.name !== sectionName;
                });
                this.setState({
                    childrenRegistered: newAccordionSectionChildren
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, id = _this$props.id, children = _this$props.children, style = _this$props.style, className = _this$props.className;
                return(/*#__PURE__*/ _react["default"].createElement(_ul["default"], {
                    ref: this.containerRef,
                    id: id,
                    className: className,
                    style: style
                }, /*#__PURE__*/ _react["default"].createElement(_context.Provider, {
                    value: this.state
                }, children)));
            }
        }
    ], [
        {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(props, state) {
                var activeSectionNames = props.activeSectionNames, onToggleSection = props.onToggleSection;
                if (activeSectionNames && activeSectionNames !== state.activeNames && typeof onToggleSection === 'function') return {
                    activeNames: activeSectionNames
                };
                return null;
            }
        }
    ]);
    return Accordion2;
}(_react.Component);
exports["default"] = Accordion1;
Accordion1.propTypes = {
    /** The id of the outer element. */ id: _propTypes["default"].string,
    /** A CSS class for the outer element, in addition to the component's base classes. */ className: _propTypes["default"].string,
    /** An object with custom style applied for the outer element. */ style: _propTypes["default"].object,
    /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */ children: _propTypes["default"].node,
    /** If true, expands multiples AccordionSections.
   * This value defaults to false. */ multiple: _propTypes["default"].bool,
    /** Action fired when an AccordionSection is selected.
   * The event params include the `name` of the selected AccordionSection. */ onToggleSection: _propTypes["default"].func,
    /** It contain the name of the AccordionSection that is expanded.
   * It is an array of string when multiple is true,
   * or a string when when multiple is false.
   * It must match the name of the AccordionSection. */ activeSectionNames: _propTypes["default"].oneOfType([
        _propTypes["default"].arrayOf(_propTypes["default"].string),
        _propTypes["default"].string
    ])
};
Accordion1.defaultProps = {
    className: undefined,
    style: undefined,
    children: null,
    id: undefined,
    multiple: false,
    onToggleSection: undefined,
    activeSectionNames: undefined
};
