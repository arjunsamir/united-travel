"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Avatar = _interopRequireDefault(require("../Avatar"));
var _button = _interopRequireDefault(require("./styled/button"));
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf2["default"](Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf2["default"](this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn2["default"](this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
var AvatarButton1 = /*#__PURE__*/ function(_Component) {
    _inherits2["default"](AvatarButton2, _Component);
    var _super = _createSuper(AvatarButton2);
    function AvatarButton2(props) {
        var _this;
        _classCallCheck2["default"](this, AvatarButton2);
        _this = _super.call(this, props);
        _this.avatarButtonRef = /*#__PURE__*/ _react["default"].createRef();
        return _this;
    }
    /**
   * Returns the ref of the HTML button element.
   * @public
   */ _createClass2["default"](AvatarButton2, [
        {
            key: "focus",
            /**
     * Sets focus on the element.
     * @public
     */ value: function focus() {
                this.avatarButtonRef.current.focus();
            }
        },
        {
            key: "click",
            value: function click() {
                this.avatarButtonRef.current.click();
            }
        },
        {
            key: "blur",
            value: function blur() {
                this.avatarButtonRef.current.blur();
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, title = _this$props.title, tabIndex = _this$props.tabIndex, onClick = _this$props.onClick, onFocus = _this$props.onFocus, onBlur = _this$props.onBlur, disabled = _this$props.disabled, assistiveText = _this$props.assistiveText, ariaHaspopup = _this$props.ariaHaspopup, src = _this$props.src, initials = _this$props.initials, icon = _this$props.icon, avatarSize = _this$props.avatarSize, initialsVariant = _this$props.initialsVariant, avatarBackgroundColor = _this$props.avatarBackgroundColor;
                return(/*#__PURE__*/ _react["default"].createElement(_button["default"], {
                    "data-id": "avatar-menu-button",
                    tabIndex: tabIndex,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    disabled: disabled,
                    onClick: onClick,
                    title: title,
                    "aria-haspopup": ariaHaspopup,
                    ref: this.avatarButtonRef
                }, /*#__PURE__*/ _react["default"].createElement(_Avatar["default"], {
                    src: src,
                    icon: icon,
                    initials: initials,
                    size: avatarSize,
                    initialsVariant: initialsVariant,
                    title: title,
                    assistiveText: assistiveText,
                    ariaHaspopup: true,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    backgroundColor: avatarBackgroundColor
                })));
            }
        },
        {
            key: "htmlElementRef",
            get: function get() {
                return this.avatarButtonRef;
            }
        }
    ]);
    return AvatarButton2;
}(_react.Component);
exports["default"] = AvatarButton1;
AvatarButton1.propTypes = {
    title: _propTypes["default"].string,
    tabIndex: _propTypes["default"].oneOfType([
        _propTypes["default"].number,
        _propTypes["default"].string
    ]),
    onClick: _propTypes["default"].func,
    onFocus: _propTypes["default"].func,
    onBlur: _propTypes["default"].func,
    assistiveText: _propTypes["default"].string,
    ariaHaspopup: _propTypes["default"].bool,
    disabled: _propTypes["default"].bool,
    src: _propTypes["default"].string,
    initials: _propTypes["default"].string,
    icon: _propTypes["default"].node,
    avatarSize: _propTypes["default"].oneOf([
        'x-small',
        'small',
        'medium',
        'large'
    ]),
    initialsVariant: _propTypes["default"].oneOf([
        'default',
        'inverse'
    ]),
    /** A valid background color to customize the avatar. */ avatarBackgroundColor: _propTypes["default"].string
};
AvatarButton1.defaultProps = {
    title: undefined,
    disabled: false,
    tabIndex: undefined,
    onClick: function onClick() {
    },
    onFocus: function onFocus() {
    },
    onBlur: function onBlur() {
    },
    assistiveText: undefined,
    ariaHaspopup: false,
    src: undefined,
    initials: undefined,
    icon: null,
    avatarSize: 'medium',
    initialsVariant: 'default',
    avatarBackgroundColor: ''
};
