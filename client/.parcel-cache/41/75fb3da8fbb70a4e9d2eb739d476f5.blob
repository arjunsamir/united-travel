"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactDom = require("react-dom");
var _RenderIf = _interopRequireDefault(require("../RenderIf"));
var _utils = require("../../libs/utils");
var _constants = require("../../libs/constants");
var _header = _interopRequireDefault(require("./header"));
var _closeIcon = _interopRequireDefault(require("./closeIcon"));
var _manageTab = _interopRequireDefault(require("../../libs/manageTab"));
var _scrollController = require("../../libs/scrollController");
var _counterManager = _interopRequireDefault(require("../../libs/counterManager"));
var _backDrop = _interopRequireDefault(require("./styled/backDrop"));
var _modalContainer = _interopRequireDefault(require("./styled/modalContainer"));
var _closeButton = _interopRequireDefault(require("./styled/closeButton"));
var _content = _interopRequireDefault(require("./styled/content"));
var _footer = _interopRequireDefault(require("./styled/footer"));
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf2["default"](Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf2["default"](this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn2["default"](this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * Modals are used to display content in a layer above the app.
 * This is used in cases such as the creation or editing of a record,
 * as well as various types of messaging.
 * @category Layout
 */ var Modal1 = /*#__PURE__*/ function(_Component) {
    _inherits2["default"](Modal2, _Component);
    var _super = _createSuper(Modal2);
    function Modal2(props) {
        var _this;
        _classCallCheck2["default"](this, Modal2);
        _this = _super.call(this, props);
        _this.containerRef = /*#__PURE__*/ _react["default"].createRef();
        _this.buttonRef = /*#__PURE__*/ _react["default"].createRef();
        _this.modalRef = /*#__PURE__*/ _react["default"].createRef();
        _this.contentRef = /*#__PURE__*/ _react["default"].createRef();
        _this.modalHeadingId = _utils.uniqueId('modal-heading');
        _this.modalContentId = _utils.uniqueId('modal-content');
        _this.handleKeyPressed = _this.handleKeyPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleClick = _this.handleClick.bind(_assertThisInitialized2["default"](_this));
        _this.closeModal = _this.closeModal.bind(_assertThisInitialized2["default"](_this));
        _this.addBackdropClickListener = _this.addBackdropClickListener.bind(_assertThisInitialized2["default"](_this));
        _this.removeBackdropClickListener = _this.removeBackdropClickListener.bind(_assertThisInitialized2["default"](_this));
        return _this;
    }
    _createClass2["default"](Modal2, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var isOpen = this.props.isOpen;
                if (isOpen) {
                    this.contentElement = this.contentRef.current;
                    _counterManager["default"].increment();
                    _scrollController.disableBodyScroll(this.contentRef.current);
                    this.modalTriggerElement = document.activeElement;
                    this.modalRef.current.focus();
                    this.addBackdropClickListener();
                }
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var _this$props = this.props, isOpen = _this$props.isOpen, onOpened = _this$props.onOpened;
                var prevIsOpen = prevProps.isOpen;
                var wasOpened = isOpen && !prevIsOpen;
                var wasClosed = !isOpen && prevIsOpen;
                if (wasOpened) {
                    _counterManager["default"].increment();
                    this.contentElement = this.contentRef.current;
                    _scrollController.disableBodyScroll(this.contentRef.current);
                    this.modalTriggerElement = document.activeElement;
                    this.modalRef.current.focus();
                    this.addBackdropClickListener();
                    onOpened();
                }
                if (wasClosed) {
                    this.removeBackdropClickListener();
                    _counterManager["default"].decrement();
                    if (this.modalTriggerElement) this.modalTriggerElement.focus();
                    if (!_counterManager["default"].hasModalsOpen()) {
                        _scrollController.enableBodyScroll(this.contentElement);
                        _scrollController.clearAllBodyScrollLocks();
                    }
                }
            }
        },
        {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                var isOpen = this.props.isOpen;
                if (isOpen) _counterManager["default"].decrement();
                if (!_counterManager["default"].hasModalsOpen()) {
                    _scrollController.enableBodyScroll(this.contentElement);
                    _scrollController.clearAllBodyScrollLocks();
                }
                this.removeBackdropClickListener();
            }
        },
        {
            key: "handleKeyPressed",
            value: function handleKeyPressed(event) {
                event.stopPropagation();
                var isOpen = this.props.isOpen;
                if (isOpen && event.keyCode === _constants.ESCAPE_KEY && this.containerRef.current.contains(event.target)) this.closeModal();
                if (event.keyCode === _constants.TAB_KEY) _manageTab["default"](this.modalRef.current, event);
                return null;
            }
        },
        {
            key: "handleClick",
            value: function handleClick(event) {
                var isOpen = this.props.isOpen;
                if (isOpen) {
                    var isClickOutsideModal = !this.modalRef.current.contains(event.target);
                    if (isClickOutsideModal) return this.closeModal();
                }
                return null;
            }
        },
        {
            key: "closeModal",
            value: function closeModal() {
                var onRequestClose = this.props.onRequestClose;
                return onRequestClose();
            }
        },
        {
            key: "addBackdropClickListener",
            value: function addBackdropClickListener() {
                var node = this.containerRef.current;
                if (node) node.addEventListener('click', this.handleClick);
            }
        },
        {
            key: "removeBackdropClickListener",
            value: function removeBackdropClickListener() {
                var node = this.containerRef.current;
                if (node) node.removeEventListener('click', this.handleClick);
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props2 = this.props, title = _this$props2.title, style = _this$props2.style, className = _this$props2.className, children = _this$props2.children, footer = _this$props2.footer, isOpen = _this$props2.isOpen, id = _this$props2.id, size = _this$props2.size, hideCloseButton = _this$props2.hideCloseButton;
                if (isOpen) return(/*#__PURE__*/ _reactDom.createPortal(/*#__PURE__*/ _react["default"].createElement(_backDrop["default"], {
                    role: "presentation",
                    isOpen: isOpen,
                    id: id,
                    ref: this.containerRef,
                    onKeyDown: this.handleKeyPressed
                }, /*#__PURE__*/ _react["default"].createElement(_modalContainer["default"], {
                    role: "dialog",
                    tabIndex: -1,
                    "aria-labelledby": this.modalHeadingId,
                    "aria-modal": true,
                    "aria-hidden": !isOpen,
                    "aria-describedby": this.modalContentId,
                    style: style,
                    ref: this.modalRef,
                    isOpen: isOpen,
                    className: className,
                    size: size
                }, /*#__PURE__*/ _react["default"].createElement(_RenderIf["default"], {
                    isTrue: !hideCloseButton
                }, /*#__PURE__*/ _react["default"].createElement(_closeButton["default"], {
                    id: "modal-close-button",
                    icon: /*#__PURE__*/ _react["default"].createElement(_closeIcon["default"], null),
                    title: "Close",
                    onClick: this.closeModal,
                    ref: this.buttonRef
                })), /*#__PURE__*/ _react["default"].createElement(_header["default"], {
                    id: this.modalHeadingId,
                    title: title
                }), /*#__PURE__*/ _react["default"].createElement(_content["default"], {
                    id: this.modalContentId,
                    ref: this.contentRef
                }, children), /*#__PURE__*/ _react["default"].createElement(_RenderIf["default"], {
                    isTrue: footer
                }, /*#__PURE__*/ _react["default"].createElement(_footer["default"], null, footer)))), document.body));
                return null;
            }
        }
    ]);
    return Modal2;
}(_react.Component);
exports["default"] = Modal1;
Modal1.propTypes = {
    /** The title can include text or another component,
   * and is displayed in the header of the component. */ title: _propTypes["default"].oneOfType([
        _propTypes["default"].string,
        _propTypes["default"].node
    ]),
    /** The size of the Modal. Valid values are small, medium, and large.
   * This value defaults to small. */ size: _propTypes["default"].oneOf([
        'small',
        'medium',
        'large'
    ]),
    /** The footer can include text or another component. */ footer: _propTypes["default"].node,
    /** Controls whether the Modal is opened or not. If true, the modal is open. */ isOpen: _propTypes["default"].bool,
    /** The action triggered when the component request to close
   *  (e.g click close button, press esc key or click outside the modal). */ onRequestClose: _propTypes["default"].func,
    /** A callback triggered when the modal is opened. This is useful for example to set focus
   * to an element inside the modal content after it is opened.
   */ onOpened: _propTypes["default"].func,
    /** The id of the outer element. */ id: _propTypes["default"].string,
    /** A CSS class for the outer element, in addition to the component's base classes. */ className: _propTypes["default"].string,
    /** An object with custom style applied to the outer element. */ style: _propTypes["default"].object,
    /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */ children: _propTypes["default"].node,
    /** If true, hide the close button in the modal. */ hideCloseButton: _propTypes["default"].bool
};
Modal1.defaultProps = {
    isOpen: false,
    title: null,
    size: 'small',
    children: null,
    className: undefined,
    style: undefined,
    footer: null,
    onRequestClose: function onRequestClose() {
    },
    onOpened: function onOpened() {
    },
    id: undefined,
    hideCloseButton: false
};
