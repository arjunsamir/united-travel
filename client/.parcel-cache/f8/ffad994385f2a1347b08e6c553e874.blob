"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _context = require("./context");
var _container = _interopRequireDefault(require("./styled/container"));
var _indicatorList = _interopRequireDefault(require("./styled/indicatorList"));
var _indicatorBar = _interopRequireDefault(require("./styled/indicatorBar"));
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf2["default"](Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf2["default"](this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn2["default"](this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * The ProgressIndicator is a visual representation of a user's progress through a set of steps.
 * To add the steps, you will need to implement the `ProgressStep` component.
 */ var ProgressIndicator1 = /*#__PURE__*/ function(_Component) {
    _inherits2["default"](ProgressIndicator2, _Component);
    var _super = _createSuper(ProgressIndicator2);
    function ProgressIndicator2(props) {
        var _this;
        _classCallCheck2["default"](this, ProgressIndicator2);
        _this = _super.call(this, props);
        _this.stepChildren = [];
        _this.numbersMap = {
        };
        _this.registerStep = _this.registerStep.bind(_assertThisInitialized2["default"](_this));
        _this.setChildrenState = _this.setChildrenState.bind(_assertThisInitialized2["default"](_this));
        return _this;
    }
    _createClass2["default"](ProgressIndicator2, [
        {
            key: "setChildrenState",
            value: function setChildrenState(step) {
                var currentStepName = this.props.currentStepName;
                var activeStepIndex = this.stepChildren.findIndex(function(item) {
                    return item.name === currentStepName;
                });
                var currentChildIndex = this.stepChildren.findIndex(function(item) {
                    return item.name === step.name;
                });
                if (currentChildIndex === activeStepIndex) step.onSetStepState('Active');
                else if (activeStepIndex === -1 || currentChildIndex < activeStepIndex) step.onSetStepState('Completed');
                else if (currentChildIndex > activeStepIndex) step.onSetStepState('Inactive');
            }
        },
        {
            key: "registerStep",
            value: function registerStep(step) {
                var newChildrenRefs = this.stepChildren.concat([
                    step
                ]);
                this.stepChildren = newChildrenRefs;
                var name = step.name;
                this.numbersMap[name] = newChildrenRefs.length;
                this.setChildrenState(step);
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$props = this.props, style = _this$props.style, className = _this$props.className, variant = _this$props.variant, children = _this$props.children, currentStepName = _this$props.currentStepName, onClick = _this$props.onClick;
                var context = {
                    currentStepName: currentStepName,
                    privateRegisterStep: this.registerStep,
                    privateOnClick: onClick,
                    setChildrenState: this.setChildrenState,
                    numbersMap: this.numbersMap,
                    variant: variant
                };
                return(/*#__PURE__*/ _react["default"].createElement(_container["default"], {
                    className: className,
                    style: style
                }, /*#__PURE__*/ _react["default"].createElement(_indicatorList["default"], null, /*#__PURE__*/ _react["default"].createElement(_context.Provider, {
                    value: context
                }, children)), /*#__PURE__*/ _react["default"].createElement(_indicatorBar["default"], null)));
            }
        }
    ]);
    return ProgressIndicator2;
}(_react.Component);
exports["default"] = ProgressIndicator1;
ProgressIndicator1.propTypes = {
    /** The current step, which must match the name prop of one of ProgressStep components. */ currentStepName: _propTypes["default"].string,
    /** A CSS class for the outer element, in addition to the component's base classes. */ className: _propTypes["default"].string,
    /** An object with custom style applied to the outer element. */ style: _propTypes["default"].object,
    /** The variant of the ProgressIndicator */ variant: _propTypes["default"].oneOf([
        'default',
        'numeric'
    ]),
    /** The action triggered when the element is clicked. */ onClick: _propTypes["default"].func,
    /**
   * This prop that should not be visible in the documentation.
   * @ignore
   */ children: _propTypes["default"].node
};
ProgressIndicator1.defaultProps = {
    currentStepName: '',
    className: undefined,
    style: undefined,
    variant: 'default',
    onClick: function onClick() {
    },
    children: null
};
