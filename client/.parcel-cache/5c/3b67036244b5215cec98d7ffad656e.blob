"use strict";
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _daysOfWeek = _interopRequireDefault(require("./daysOfWeek"));
var _month = _interopRequireDefault(require("./month"));
var _helpers = require("./helpers");
var _calendarHeader = _interopRequireDefault(require("./calendarHeader"));
var _table = _interopRequireDefault(require("./styled/table"));
var _constants = require("../../libs/constants");
var _utils = require("../../libs/utils");
var _context = require("./context");
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf2["default"](Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf2["default"](this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn2["default"](this, result);
    };
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
var SingleCalendar1 = /*#__PURE__*/ function(_Component) {
    _inherits2["default"](SingleCalendar2, _Component);
    var _super = _createSuper(SingleCalendar2);
    function SingleCalendar2(props) {
        var _this$keyHandlerMap, _this$keyHandlerMapAl;
        var _this;
        _classCallCheck2["default"](this, SingleCalendar2);
        _this = _super.call(this, props);
        _this.state = {
            focusedDate: _helpers.normalizeDate(props.value),
            currentMonth: _helpers.getFirstDayMonth(_helpers.normalizeDate(props.value)),
            currentRange: props.selectedRange
        };
        _this.enableNavKeys = false;
        _this.monthLabelId = _utils.uniqueId('month');
        _this.previousMonth = _this.previousMonth.bind(_assertThisInitialized2["default"](_this));
        _this.nextMonth = _this.nextMonth.bind(_assertThisInitialized2["default"](_this));
        _this.handleYearChange = _this.handleYearChange.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyUpPressed = _this.handleKeyUpPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyDownPressed = _this.handleKeyDownPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyLeftPressed = _this.handleKeyLeftPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyRightPressed = _this.handleKeyRightPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyHomePressed = _this.handleKeyHomePressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyEndPressed = _this.handleKeyEndPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyPageUpPressed = _this.handleKeyPageUpPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyPageDownPressed = _this.handleKeyPageDownPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyEnterPressed = _this.handleKeyEnterPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyAltPageUpPressed = _this.handleKeyAltPageUpPressed.bind(_assertThisInitialized2["default"](_this));
        _this.handleKeyAltPageDownPressed = _this.handleKeyAltPageDownPressed.bind(_assertThisInitialized2["default"](_this));
        _this.keyHandlerMap = (_this$keyHandlerMap = {
        }, _defineProperty2["default"](_this$keyHandlerMap, _constants.UP_KEY, _this.handleKeyUpPressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.DOWN_KEY, _this.handleKeyDownPressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.LEFT_KEY, _this.handleKeyLeftPressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.RIGHT_KEY, _this.handleKeyRightPressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.HOME_KEY, _this.handleKeyHomePressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.END_KEY, _this.handleKeyEndPressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.PAGEUP_KEY, _this.handleKeyPageUpPressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.PAGEDN_KEY, _this.handleKeyPageDownPressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.SPACE_KEY, _this.handleKeyEnterPressed), _defineProperty2["default"](_this$keyHandlerMap, _constants.ENTER_KEY, _this.handleKeyEnterPressed), _this$keyHandlerMap);
        _this.keyHandlerMapAlt = (_this$keyHandlerMapAl = {
        }, _defineProperty2["default"](_this$keyHandlerMapAl, _constants.HOME_KEY, _this.handleKeyHomePressed), _defineProperty2["default"](_this$keyHandlerMapAl, _constants.END_KEY, _this.handleKeyEndPressed), _defineProperty2["default"](_this$keyHandlerMapAl, _constants.PAGEUP_KEY, _this.handleKeyAltPageUpPressed), _defineProperty2["default"](_this$keyHandlerMapAl, _constants.PAGEDN_KEY, _this.handleKeyAltPageDownPressed), _this$keyHandlerMapAl);
        _this.onDayFocus = _this.onDayFocus.bind(_assertThisInitialized2["default"](_this));
        _this.onDayBlur = _this.onDayBlur.bind(_assertThisInitialized2["default"](_this));
        _this.onDayHover = _this.onDayHover.bind(_assertThisInitialized2["default"](_this));
        return _this;
    }
    _createClass2["default"](SingleCalendar2, [
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var prevSelectedRange = prevProps.selectedRange, prevValue = prevProps.value;
                var _this$props = this.props, selectedRange = _this$props.selectedRange, value = _this$props.value;
                var normalizedDate = _helpers.normalizeDate(value);
                if (_helpers.formatDate(_helpers.normalizeDate(prevValue)) !== _helpers.formatDate(normalizedDate)) {
                    this.updateCurrentMonth(normalizedDate);
                    this.updateFocusedDate(normalizedDate);
                }
                if (!_helpers.isSameDatesRange(prevSelectedRange, selectedRange)) this.updateCurrentRange(selectedRange);
            }
        },
        {
            key: "onDayFocus",
            value: function onDayFocus() {
                this.enableNavKeys = true;
            }
        },
        {
            key: "onDayBlur",
            value: function onDayBlur() {
                this.enableNavKeys = false;
            }
        },
        {
            key: "onDayHover",
            value: function onDayHover(date) {
                var _this$props2 = this.props, selectionType = _this$props2.selectionType, selectedRange = _this$props2.selectedRange;
                if (selectionType === 'single' || _helpers.isEmptyRange(selectedRange)) return;
                var _selectedRange = _slicedToArray2["default"](selectedRange, 2), rangeStart = _selectedRange[0], rangeEnd = _selectedRange[1];
                if (rangeEnd !== undefined) return;
                var currentRange = this.state.currentRange;
                var _currentRange = _slicedToArray2["default"](currentRange, 1), currentRangeStart = _currentRange[0];
                if (_helpers.isDateBelowLimit(date, rangeStart)) this.setState({
                    currentRange: [
                        currentRangeStart
                    ]
                });
                else this.setState({
                    currentRange: [
                        rangeStart,
                        date
                    ]
                });
            }
        },
        {
            key: "getContext",
            value: function getContext() {
                var _this$state = this.state, focusedDate = _this$state.focusedDate, currentRange = _this$state.currentRange;
                var _this$props3 = this.props, selectionType = _this$props3.selectionType, selectedRange = _this$props3.selectedRange;
                return {
                    focusedDate: focusedDate,
                    useAutoFocus: this.enableNavKeys,
                    selectionType: selectionType,
                    selectedRange: selectedRange,
                    currentRange: currentRange,
                    privateKeyDown: this.handleKeyDown,
                    privateOnFocus: this.onDayFocus,
                    privateOnBlur: this.onDayBlur,
                    privateOnHover: this.onDayHover
                };
            }
        },
        {
            key: "moveFocusedDay",
            value: function moveFocusedDay(increment) {
                var _this$state2 = this.state, currentMonth = _this$state2.currentMonth, focusedDate = _this$state2.focusedDate;
                var nextFocusedDate = _helpers.addDays(focusedDate, increment);
                var nextFocusedMonth = currentMonth;
                if (!_helpers.isSameMonth(nextFocusedDate, currentMonth)) nextFocusedMonth = _helpers.getFirstDayMonth(_helpers.addMonths(currentMonth, _helpers.getSign(increment)));
                var _this$props4 = this.props, minDate = _this$props4.minDate, maxDate = _this$props4.maxDate;
                var _getCalendarBounds = _helpers.getCalendarBounds(minDate, maxDate), minCalendarDate = _getCalendarBounds.minCalendarDate, maxCalendarDate = _getCalendarBounds.maxCalendarDate;
                if (_helpers.isDateBelowLimit(nextFocusedDate, minCalendarDate)) {
                    nextFocusedDate = minCalendarDate;
                    nextFocusedMonth = _helpers.getFirstDayMonth(minCalendarDate);
                } else if (_helpers.isDateBeyondLimit(nextFocusedDate, maxCalendarDate)) {
                    nextFocusedDate = maxCalendarDate;
                    nextFocusedMonth = _helpers.getFirstDayMonth(maxCalendarDate);
                }
                this.setState({
                    focusedDate: nextFocusedDate,
                    currentMonth: nextFocusedMonth
                });
            }
        },
        {
            key: "moveFocusedMonth",
            value: function moveFocusedMonth(increment) {
                var focusedDate = this.state.focusedDate;
                var nextFocusedDate = _helpers.addMonths(focusedDate, increment);
                var _this$props5 = this.props, minDate = _this$props5.minDate, maxDate = _this$props5.maxDate;
                var _getCalendarBounds2 = _helpers.getCalendarBounds(minDate, maxDate), minCalendarDate = _getCalendarBounds2.minCalendarDate, maxCalendarDate = _getCalendarBounds2.maxCalendarDate;
                if (_helpers.isDateBelowLimit(nextFocusedDate, minCalendarDate)) nextFocusedDate = minCalendarDate;
                else if (_helpers.isDateBeyondLimit(nextFocusedDate, maxCalendarDate)) nextFocusedDate = maxCalendarDate;
                this.setState({
                    focusedDate: nextFocusedDate,
                    currentMonth: _helpers.getFirstDayMonth(nextFocusedDate)
                });
            }
        },
        {
            key: "updateCurrentMonth",
            value: function updateCurrentMonth(value) {
                this.setState({
                    currentMonth: _helpers.getFirstDayMonth(value)
                });
            }
        },
        {
            key: "updateFocusedDate",
            value: function updateFocusedDate(value) {
                this.setState({
                    focusedDate: value
                });
            }
        },
        {
            key: "updateCurrentRange",
            value: function updateCurrentRange(value) {
                this.setState({
                    currentRange: value
                });
            }
        },
        {
            key: "nextMonth",
            value: function nextMonth() {
                var currentMonth = this.state.currentMonth;
                var newMonth = _helpers.addMonths(currentMonth, 1);
                var value = this.props.value;
                var focusedDate = _helpers.getNextFocusedDate(value, newMonth);
                this.setState({
                    focusedDate: focusedDate,
                    currentMonth: newMonth
                });
            }
        },
        {
            key: "previousMonth",
            value: function previousMonth() {
                var currentMonth = this.state.currentMonth;
                var newMonth = _helpers.addMonths(currentMonth, -1);
                var value = this.props.value;
                var focusedDate = _helpers.getNextFocusedDate(value, newMonth);
                this.setState({
                    focusedDate: focusedDate,
                    currentMonth: newMonth
                });
            }
        },
        {
            key: "handleYearChange",
            value: function handleYearChange(event) {
                var currentMonth = this.state.currentMonth;
                var year = +event.target.value;
                var newMonth = new Date(currentMonth);
                newMonth.setFullYear(year);
                var value = this.props.value;
                var focusedDate = _helpers.getNextFocusedDate(value, newMonth);
                this.setState({
                    focusedDate: focusedDate,
                    currentMonth: newMonth
                });
            }
        },
        {
            key: "handleKeyDown",
            value: function handleKeyDown(event) {
                if (!this.enableNavKeys) return;
                var keyCode = event.keyCode, altKey = event.altKey;
                var keyHandler = altKey ? this.keyHandlerMapAlt : this.keyHandlerMap;
                if (keyHandler[keyCode]) {
                    event.preventDefault();
                    event.stopPropagation();
                    keyHandler[keyCode]();
                }
            }
        },
        {
            key: "handleKeyUpPressed",
            value: function handleKeyUpPressed() {
                this.moveFocusedDay(-7);
            }
        },
        {
            key: "handleKeyDownPressed",
            value: function handleKeyDownPressed() {
                this.moveFocusedDay(7);
            }
        },
        {
            key: "handleKeyLeftPressed",
            value: function handleKeyLeftPressed() {
                this.moveFocusedDay(-1);
            }
        },
        {
            key: "handleKeyRightPressed",
            value: function handleKeyRightPressed() {
                this.moveFocusedDay(1);
            }
        },
        {
            key: "handleKeyHomePressed",
            value: function handleKeyHomePressed() {
                var focusedDate = this.state.focusedDate;
                this.moveFocusedDay(-focusedDate.getDay());
            }
        },
        {
            key: "handleKeyEndPressed",
            value: function handleKeyEndPressed() {
                var focusedDate = this.state.focusedDate;
                this.moveFocusedDay(6 - focusedDate.getDay());
            }
        },
        {
            key: "handleKeyPageUpPressed",
            value: function handleKeyPageUpPressed() {
                this.moveFocusedMonth(-1);
            }
        },
        {
            key: "handleKeyPageDownPressed",
            value: function handleKeyPageDownPressed() {
                this.moveFocusedMonth(1);
            }
        },
        {
            key: "handleKeyAltPageUpPressed",
            value: function handleKeyAltPageUpPressed() {
                this.moveFocusedMonth(-12);
            }
        },
        {
            key: "handleKeyAltPageDownPressed",
            value: function handleKeyAltPageDownPressed() {
                this.moveFocusedMonth(12);
            }
        },
        {
            key: "handleKeyEnterPressed",
            value: function handleKeyEnterPressed() {
                var onChange = this.props.onChange;
                var focusedDate = this.state.focusedDate;
                onChange(new Date(focusedDate));
            }
        },
        {
            key: "render",
            value: function render() {
                var _this$state3 = this.state, currentMonth = _this$state3.currentMonth, currentRange = _this$state3.currentRange;
                var _this$props6 = this.props, id = _this$props6.id, value = _this$props6.value, onChange = _this$props6.onChange, minDate = _this$props6.minDate, maxDate = _this$props6.maxDate, className = _this$props6.className, style = _this$props6.style, locale = _this$props6.locale;
                var formattedMonth = _helpers.getFormattedMonth(currentMonth, locale);
                var currentYear = currentMonth.getFullYear();
                var yearsRange = _helpers.getYearsRange({
                    minDate: minDate,
                    maxDate: maxDate,
                    currentMonth: currentMonth.getMonth()
                });
                var lastYearItem = yearsRange[yearsRange.length - 1];
                var maxSelectableDate = maxDate || new Date(lastYearItem.value, 11, 31);
                var disableNextMonth = _helpers.addMonths(currentMonth, 1) > maxSelectableDate;
                var minSelectableDate = minDate || new Date(yearsRange[0].value, 0, 1);
                var prevDate = _helpers.getLastDayMonth(_helpers.addMonths(currentMonth, -1));
                var disablePreviousMonth = prevDate < minSelectableDate;
                return(/*#__PURE__*/ _react["default"].createElement("section", {
                    id: id,
                    className: className,
                    style: style,
                    "data-calendar-type": "single"
                }, /*#__PURE__*/ _react["default"].createElement(_calendarHeader["default"], {
                    variant: "single",
                    monthLabelId: this.monthLabelId,
                    formattedMonth: formattedMonth,
                    currentYear: currentYear,
                    yearsRange: yearsRange,
                    disablePreviousMonth: disablePreviousMonth,
                    disableNextMonth: disableNextMonth,
                    onPrevMonthClick: this.previousMonth,
                    onNextMonthClick: this.nextMonth,
                    onYearChange: this.handleYearChange
                }), /*#__PURE__*/ _react["default"].createElement(_table["default"], {
                    role: "grid",
                    "aria-labelledby": this.monthLabelId
                }, /*#__PURE__*/ _react["default"].createElement(_daysOfWeek["default"], {
                    locale: locale
                }), /*#__PURE__*/ _react["default"].createElement(_context.Provider, {
                    value: this.getContext()
                }, /*#__PURE__*/ _react["default"].createElement(_month["default"], {
                    value: value,
                    firstDayMonth: currentMonth,
                    minDate: minDate,
                    maxDate: maxDate,
                    onChange: onChange,
                    selectedRange: currentRange
                })))));
            }
        }
    ]);
    return SingleCalendar2;
}(_react.Component);
SingleCalendar1.propTypes = {
    value: _propTypes["default"].oneOfType([
        _propTypes["default"].instanceOf(Date),
        _propTypes["default"].string
    ]),
    maxDate: _propTypes["default"].instanceOf(Date),
    minDate: _propTypes["default"].instanceOf(Date),
    onChange: _propTypes["default"].func,
    className: _propTypes["default"].string,
    style: _propTypes["default"].object,
    id: _propTypes["default"].string,
    locale: _propTypes["default"].string,
    selectionType: _propTypes["default"].oneOf([
        'single',
        'range'
    ]),
    selectedRange: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([
        _propTypes["default"].instanceOf(Date),
        _propTypes["default"].string
    ]))
};
SingleCalendar1.defaultProps = {
    value: undefined,
    minDate: undefined,
    maxDate: undefined,
    onChange: function onChange() {
    },
    className: undefined,
    style: undefined,
    id: undefined,
    locale: undefined,
    selectionType: 'single',
    selectedRange: undefined
};
var _default = SingleCalendar1;
exports["default"] = _default;
