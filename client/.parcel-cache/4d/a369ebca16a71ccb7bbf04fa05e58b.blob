"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = Month;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _helpers = require("../Calendar/helpers");
var _week = _interopRequireDefault(require("./week"));
function Month(props) {
    var firstDayMonth = props.firstDayMonth, selectedDate = props.selectedDate, minDate = props.minDate, maxDate = props.maxDate, onSelectDate = props.onSelectDate;
    var date = new Date(firstDayMonth);
    var lastDayMonth = _react.useMemo(function() {
        return _helpers.getLastDayMonth(firstDayMonth);
    }, [
        firstDayMonth
    ]);
    function Weeks() {
        var weeks = [];
        var dayOfWeek = date.getDay();
        var daysAfter = 6 - dayOfWeek;
        while(date <= lastDayMonth || _helpers.addDays(date, -dayOfWeek) <= lastDayMonth){
            var startDate = _helpers.addDays(date, -dayOfWeek);
            var endDate = _helpers.addDays(date, daysAfter);
            startDate.setHours(0, 0, 0, 0);
            endDate.setHours(11, 59, 59, 999);
            weeks.push(/*#__PURE__*/ _react["default"].createElement(_week["default"], {
                selectedDate: selectedDate,
                startDate: startDate,
                endDate: endDate,
                minDate: minDate,
                maxDate: maxDate,
                firstDayMonth: firstDayMonth,
                key: date.getTime(),
                onSelectDate: onSelectDate
            }));
            date = _helpers.addDays(date, 7);
        }
        return weeks;
    }
    return(/*#__PURE__*/ _react["default"].createElement("tbody", null, /*#__PURE__*/ _react["default"].createElement(Weeks, null)));
}
Month.propTypes = {
    firstDayMonth: _propTypes["default"].instanceOf(Date),
    minDate: _propTypes["default"].instanceOf(Date),
    maxDate: _propTypes["default"].instanceOf(Date),
    selectedDate: _propTypes["default"].oneOfType([
        _propTypes["default"].instanceOf(Date),
        _propTypes["default"].string
    ]),
    onSelectDate: _propTypes["default"].func
};
Month.defaultProps = {
    firstDayMonth: undefined,
    minDate: undefined,
    maxDate: undefined,
    selectedDate: undefined,
    onSelectDate: function onSelectDate() {
    }
};
