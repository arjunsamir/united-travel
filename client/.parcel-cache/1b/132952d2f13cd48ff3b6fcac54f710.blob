"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = useScrollControls;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _helpers = require("../helpers");
function useScrollControls(scrollableRef) {
    var _useState = _react.useState(), _useState2 = _slicedToArray2["default"](_useState, 2), showScrollUp = _useState2[0], setShowScrollUp = _useState2[1];
    var _useState3 = _react.useState(), _useState4 = _slicedToArray2["default"](_useState3, 2), showScrollDown = _useState4[0], setShowScrollDown = _useState4[1];
    var timer = _react.useRef();
    var handleScrollScrollable = _react.useCallback(function() {
        setShowScrollUp(scrollableRef.current.scrollTop > 0);
        setShowScrollDown(!_helpers.isScrollPositionAtScrollable(scrollableRef.current));
    }, [
        scrollableRef
    ]);
    var stopScroll = _react.useCallback(function() {
        if (timer.current) clearTimeout(timer.current);
    }, []);
    var handleScrollUpMouseEnter = _react.useCallback(function() {
        stopScroll();
        timer.current = setTimeout(function next() {
            if (scrollableRef.current.scrollTop > 0) {
                scrollableRef.current.scrollBy(0, -1);
                timer.current = setTimeout(next, 5);
            } else stopScroll();
        }, 5);
    }, [
        scrollableRef,
        stopScroll
    ]);
    var handleScrollDownouseEnter = _react.useCallback(function() {
        stopScroll();
        timer.current = setTimeout(function next() {
            if (!_helpers.isScrollPositionAtScrollable(scrollableRef.current)) {
                scrollableRef.current.scrollBy(0, 1);
                timer.current = setTimeout(next, 5);
            } else stopScroll();
        }, 5);
    }, [
        scrollableRef,
        stopScroll
    ]);
    _react.useEffect(function() {
        var scrollable = scrollableRef.current;
        scrollable.addEventListener('scroll', handleScrollScrollable);
        return function() {
            scrollable.removeEventListener('scroll', handleScrollScrollable);
        };
    }, [
        handleScrollDownouseEnter,
        handleScrollScrollable,
        handleScrollUpMouseEnter,
        scrollableRef,
        stopScroll
    ]);
    _react.useEffect(function() {
        return handleScrollScrollable();
    });
    return {
        showScrollUp: showScrollUp,
        showScrollDown: showScrollDown,
        handleScrollUpMouseEnter: handleScrollUpMouseEnter,
        handleScrollDownouseEnter: handleScrollDownouseEnter,
        stopScroll: stopScroll
    };
}
